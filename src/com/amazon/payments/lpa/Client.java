package com.amazon.payments.lpa;

import com.amazon.payments.lpa.request.*;
import com.amazon.payments.lpa.helper.ServiceConstants;
import com.amazon.payments.lpa.helper.CommonHelper;
import com.amazon.payments.lpa.response.parser.*;
import com.amazon.payments.lpa.response.autogenerated.model.HttpResponseObject;
import com.amazon.payments.lpa.exceptions.AmazonClientException;
import com.amazon.payments.lpa.types.Environment;
import com.amazon.payments.lpa.types.Region;
import com.amazon.payments.lpa.helper.ClientHelper;
import com.amazon.payments.lpa.exceptions.AmazonServiceException;
import com.amazon.payments.lpa.types.User;
import java.net.URLDecoder;
import java.util.Map;
import org.apache.log4j.Logger;

public class Client {
    private ClientHelper clientHelper;
    private ClientConfig clientConfig;
    final static Logger log = Logger.getLogger(Client.class.getName());
    
    public Client(ClientConfig config) {
        this.clientConfig = config;
        this.clientHelper = new ClientHelper(config);
    }

    /**
     *
     * @param getOrderReferenceDetailsRequest
     * @return GetOrderReferenceDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public GetOrderReferenceDetailsResponseData getOrderReferenceDetails(GetOrderReferenceDetailsRequest request) throws Exception {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getOrderReferenceDetails(rawResponse);    
    }
    


    /**
     *
     * @param setOrderReferenceDetailsRequest
     * @return SetOrderReferenceDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public SetOrderReferenceDetailsResponseData setOrderReferenceDetails(SetOrderReferenceDetailsRequest request) throws Exception {
        if(request.getCurrencyCode() == null) request.setCurrencyCode(clientConfig.getCurrencyCode());
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.setOrderReferenceDetails(rawResponse);
    }


    /**
     *
     * @param authorizeRequest
     * @return AuthorizeResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public AuthorizeResponseData authorize(AuthorizeRequest request) throws Exception   {
        if(request.getCurrencyCode() == null) request.setCurrencyCode(clientConfig.getCurrencyCode());
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this); 
        return Parser.getAuthorizeData(rawResponse);
    }

    /**
     *
     * @param getAuthorizationDetailsRequest
     * @return AuthorizeResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public GetAuthorizationDetailsResponseData getAuthorizationDetails(GetAuthorizationDetailsRequest request) throws Exception   {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getAuthorizationDetailsData(rawResponse);
    }
    
    /**
     *
     * @param request
     * @return CaptureResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public CaptureResponseData capture(CaptureRequest request) throws Exception   {
        if(request.getCurrencyCode() == null) request.setCurrencyCode(clientConfig.getCurrencyCode());
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getCapture(rawResponse);
    }

    /**
     *
     * @param getCaptureDetailsRequest
     * @return GetCaptureDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public GetCaptureDetailsResponseData getCaptureDetails(GetCaptureDetailsRequest request) throws Exception   {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getCaptureDetailsData(rawResponse);
    }

    /**
     *
     * @param confirmOrderReferenceRequest
     * @return ConfirmOrderReferenceResponseData 
     * @throws AmazonServiceException AmazonClientException
     */
    public ConfirmOrderReferenceResponseData  confirmOrderReference(ConfirmOrderReferenceRequest request) throws Exception   {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.confirmOrderReference(rawResponse);     
    }

    /**
     *
     * @param closeAuthorizationRequest
     * @return CloseAuthorizationResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public CloseAuthorizationResponseData closeAuthorization(CloseAuthorizationRequest request) throws Exception  {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.closeAuthorizationResponse(rawResponse);
    }

    /**
     *
     * @param cancelOrderReferenceRequest
     * @return CancelOrderReferenceResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public CancelOrderReferenceResponseData cancelOrderReference(CancelOrderReferenceRequest request) throws Exception  {
        HttpResponseObject rawResponse = rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getCancelOrderReference(rawResponse);
    }
    
    /**
     *
     * @param closeOrderReferenceRequest
     * @return CloseOrderReferenceResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public CloseOrderReferenceResponseData closeOrderReference(CloseOrderReferenceRequest request) throws Exception  {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getCloseOrderReference(rawResponse);
    }

    /**
     *
     * @param refundRequest
     * @return RefundResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public RefundResponseData refund(RefundRequest request) throws Exception  {
        if(request.getCurrencyCode() == null) request.setCurrencyCode(clientConfig.getCurrencyCode());
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getRefundData(rawResponse);
    }

    /**
     *
     * @param getRefundDetailsRequest
     * @return GetRefundDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public GetRefundDetailsResponseData getRefundDetails(GetRefundDetailsRequest request) throws Exception  {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getRefundDetailsData(rawResponse);
    }
    
    /**
     *
     * @param getBillingAgreementDetailsRequest
     * @return GetBillingAgreementDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public GetBillingAgreementDetailsResponseData getBillingAgreementDetails(GetBillingAgreementDetailsRequest request) throws Exception{
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getBillingAgreementDetailsData(rawResponse);
    }

    /**
     *
     * @param setBillingAgreementDetailsRequest
     * @return SetBillingAgreementDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public SetBillingAgreementDetailsResponseData setBillingAgreementDetails(SetBillingAgreementDetailsRequest request) throws Exception {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getSetBillingAgreementDetailsResponse(rawResponse);
    }

    /**
     *
     * @param validateBillingAgreementRequest
     * @return ValidateBillingAgreementResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public ValidateBillingAgreementResponseData validateBillingAgreement(ValidateBillingAgreementRequest request) throws Exception {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getValidateBillingAgreementResponse(rawResponse);
    }

    /**
     *
     * @param confirmBillingAgreementRequest
     * @return ConfirmBillingAgreementResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public ConfirmBillingAgreementResponseData confirmBillingAgreement(ConfirmBillingAgreementRequest request) throws Exception{
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.confirmBillingAgreementResponse(rawResponse);
    }

    /**
     *
     * @param authorizeOnBillingAgreementRequest
     * @return AuthorizeOnBillingAgreementResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public AuthorizeOnBillingAgreementResponseData authorizeOnBillingAgreement(AuthorizeOnBillingAgreementRequest request) throws Exception{
        if(request.getCurrencyCode() == null) request.setCurrencyCode(clientConfig.getCurrencyCode());
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getAuthorizeOnBillingAgreement(rawResponse);
    }

    /**
     * @param closeBillingAgreementRequest
     * @return  CloseBillingAgreementResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public  CloseBillingAgreementResponseData closeBillingAgreement(CloseBillingAgreementRequest request) throws Exception {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.closeBillingAgreementResponse(rawResponse);
    }

    /**
     * @param getProviderCreditReversalDetailsRequest
     * @return GetProviderCreditReversalDetailsResponseData 
     * @throws AmazonServiceException AmazonClientException
     */
    public GetProviderCreditReversalDetailsResponseData  getProviderCreditReversalDetails(GetProviderCreditReversalDetailsRequest request) throws Exception {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getProviderCreditReversalDetails(rawResponse);
    }

    /**
     * @param getProviderCreditDetailsRequest
     * @return GetProviderCreditDetailsResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public GetProviderCreditDetailsResponseData getProviderCreditDetails(GetProviderCreditDetailsRequest request) throws Exception {
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getGetProviderCreditDetails(rawResponse);
    }

    /**
     * @param ReverseProviderCreditResponse
     * @return  ReverseProviderCreditResponseData
     * @throws AmazonServiceException AmazonClientException
     */
    public  ReverseProviderCreditResponseData reverseProviderCredit(ReverseProviderCreditRequest request) throws Exception {
        if(request.getCurrencyCode() == null) request.setCurrencyCode(clientConfig.getCurrencyCode());
        HttpResponseObject rawResponse = clientHelper.sendRequest(RequestParameters.getParams(request), this);
        return Parser.getReverseProviderCreditResponseData(rawResponse);
    }
    
    
    /*
    * Gets the userInfo associated with access token provided
    * @param accessToken
    * @param clientId
    * @param sandboxMode
    * @param regionCode
    * @return User
    * @throws AmazonClientException
    */
    public static User getUserInfo(String accessToken , String clientId, Environment environment, Region regionCode) throws Exception {       
        
        String decodedAccessToken = URLDecoder.decode(accessToken);
        String profileEndpoint;
        
        if(environment == Environment.SANDBOX) {
            profileEndpoint = ServiceConstants.profileEndpointSandboxMappings.get(regionCode);
        } else {
            profileEndpoint = ServiceConstants.profileEndpointMappings.get(regionCode);
        }
        
        
        log.info("Retrieving User Info for accessToken: " + decodedAccessToken);
        HttpResponseObject response = CommonHelper.HttpSend("GET" , profileEndpoint + "/auth/o2/tokeninfo?access_token=" + decodedAccessToken , null , null);
        log.info("");
        //Map m = new ObjectMapper().readValue(response.getData(), Map.class);
        Map m = CommonHelper.convertJsonToObject(response.getData() , Map.class);
        if(m.containsKey("error")) {
            throw new AmazonServiceException("Retrieving User Info Failed. "+(String)m.get("error_description"));
        }
        
        if ( clientId == null || !clientId.equals(m.get("aud"))) {
                 //the access token does not belong to us
             throw new AmazonClientException("Access token does not belong to clientId: " + clientId);
        }
        
        response = CommonHelper.HttpSend("GET" , profileEndpoint + "/user/profile" , null, "bearer " + decodedAccessToken );
        //m = new ObjectMapper().readValue(response.getData() , Map.class);
        m = CommonHelper.convertJsonToObject(response.getData() , Map.class);
        if(m.containsKey("error")) {
            throw new AmazonServiceException("Retrieving User Info Failed. "+(String)m.get("error_description"));
        }
        User user = CommonHelper.convertJsonToObject(response.getData() , User.class);
        return user;
    }
    
}

