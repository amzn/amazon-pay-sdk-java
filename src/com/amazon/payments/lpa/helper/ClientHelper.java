package com.amazon.payments.lpa.helper;

import com.amazon.payments.lpa.types.Environment;
import com.amazon.payments.lpa.Client;
import com.amazon.payments.lpa.ClientConfig;
import com.amazon.payments.lpa.exceptions.AmazonClientException;
import com.amazon.payments.lpa.response.autogenerated.model.HttpResponseObject;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

public class ClientHelper {

    public ClientConfig clientConfig;
    
    public ClientHelper(ClientConfig clientConfig){
        this.clientConfig = clientConfig;
    }
    
    public Map<String, String> getAllParameters(Map<String, String> apiParameters) throws UnsupportedEncodingException {
        Map<String, String> clientParameters = new HashMap<String,String>();
        clientParameters.put("SellerId" , clientConfig.getSellerId());
        clientParameters.put("AWSAccessKeyId" , clientConfig.getAccessKeyId());
        clientParameters.put("SignatureVersion", "2");
        clientParameters.put("SignatureMethod", "HmacSHA256");
        clientParameters.put("Version", ServiceConstants.AMAZON_PAYMENTS_API_VERSION);
        clientParameters.put("Timestamp", CommonHelper.getTimestamp());
        Map<String,String> allParams = new HashMap<String,String>();
        allParams.putAll(apiParameters);
        allParams.putAll(clientParameters);
        CommonHelper.urlEncodeAPIParams(allParams);
        return allParams;
    }
    
    public String constructStringForSignature(Map<String, String> params) {
        String postHeader = "POST\n" + getServiceDomainName().replace("https://", "")  + "\n" + getServiceVersionName() + "\n";
        Map<String, String> sortedParams = new TreeMap<String, String>();
        sortedParams.putAll(params);
        return postHeader + convertParameterMapToString(sortedParams);
    }


    public HttpResponseObject doHttpPost(String httpPostRequest) throws IOException, InterruptedException {
        
        HttpResponseObject res = CommonHelper.HttpSend("POST", getServiceURLEndpoint(), httpPostRequest, getUserAgent(), clientConfig.getProxyHost(), clientConfig.getProxyPort(), clientConfig.getProxyUsername(), clientConfig.getProxyPassword());
        
        int statusCode = res.getStatusCode();
        int retry = 0;
        //503 status code is returned when request is throttled.
        while (statusCode == 503  && retry < 3) {
            retry++;
            if (retry == 1) {
                Thread.sleep(1);
            } else if (retry == 2) {
                Thread.sleep(4);
            } else if (retry == 3) {
                Thread.sleep(10);
            } else {
                return null;
            }
            res = CommonHelper.HttpSend("POST", getServiceURLEndpoint(), httpPostRequest, getUserAgent(), clientConfig.getProxyHost(), clientConfig.getProxyPort(), clientConfig.getProxyUsername(), clientConfig.getProxyPassword());
        }
        return res;
    }

    public String getUserAgent() {
            String userAgent = "Language=Java; ApplicationLibraryVersion=1; "
                    + "Platform=JAVA_PLATFORM;MWSClientVersion=2"
                    + " ApplicationName="+clientConfig.getApplicationName()+";"
                    + "ApplicationVersion=" +clientConfig.getApplicationName(); 
            return userAgent;
    }


    public String convertParameterMapToString(Map<String, String> params) {
        StringBuilder parameterString = new StringBuilder();
        Iterator<Map.Entry<String, String>> pairs = params.entrySet().iterator();
        while (pairs.hasNext()) {
            Map.Entry<String, String> pair = pairs.next();
            if (pair.getValue() != null) {
                parameterString.append(pair.getKey() + "=" + pair.getValue());
            } else {
                parameterString.append(pair.getKey() + "=");
            }
            if (pairs.hasNext()) {
                parameterString.append("&");
            }
        }
        return parameterString.toString();
    }

    
    public String buildHttpRequestUrl(Map<String, String> apiParameters ) throws IllegalStateException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException{
        Map<String,String> allParams = getAllParameters(apiParameters);
        String stringToSign = constructStringForSignature(allParams);
        String signature = CommonHelper.urlEncode(CommonHelper.getSignature(stringToSign, clientConfig.getSecretAccessKey()));
        allParams.put("Signature" , signature);
        return convertParameterMapToString(allParams);        
    }
    

    private String getServiceURLEndpoint() { 
        String mwsServiceAPIEndpoint =  getServiceDomainName() + "/" + getServiceVersionName();
        return mwsServiceAPIEndpoint;
    }
    
    private  String getServiceDomainName() {
        return ServiceConstants.mwsEndpointMappings.get(clientConfig.getRegion());   
    }
    
    private String getServiceVersionName() {
        String mwsServiceAPIVersionName;
        if(clientConfig.getEnvironment() == Environment.SANDBOX) {
            mwsServiceAPIVersionName = "/" + "OffAmazonPayments_Sandbox" + "/" + ServiceConstants.AMAZON_PAYMENTS_API_VERSION;
        }
        else { 
            mwsServiceAPIVersionName = "/" + "OffAmazonPayments" + "/" + ServiceConstants.AMAZON_PAYMENTS_API_VERSION;
        }
        return mwsServiceAPIVersionName;
    }

    public HttpResponseObject sendRequest(Map<String, String> paramMap, Client client) throws Exception {
        try {
            String postUrl = buildHttpRequestUrl(paramMap);
            return doHttpPost(postUrl);
        } catch (IOException | IllegalStateException | InterruptedException | InvalidKeyException | NoSuchAlgorithmException e) {
            throw new AmazonClientException("Encountered client exception:", e);
        }
    }
}