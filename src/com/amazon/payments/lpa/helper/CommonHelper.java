package com.amazon.payments.lpa.helper;

import com.amazon.payments.lpa.response.autogenerated.model.HttpResponseObject;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import net.sf.json.JSONObject;
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;

public class CommonHelper {
    
    final static Logger log = Logger.getLogger(CommonHelper.class.getName());

    public static String getSignature(String stringToSign, String secretKey) throws IllegalStateException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        String sig = null;
        Mac mac = Mac.getInstance("HmacSHA256");
        mac.init(new SecretKeySpec(secretKey.getBytes("UTF-8"), "HmacSHA256"));
        byte[] signature = mac.doFinal(stringToSign.getBytes("UTF-8"));
        String signatureBase64 = new String(Base64.encodeBase64(signature), "UTF-8");
        sig = signatureBase64;
        log.debug("Successfully calculated signature:" + sig);
        return sig;
    }

    public static String getTimestamp() {
        final Date date = new Date();
        final String ISO_FORMAT = "yyyy-MM-dd'T'HH:mm:ssz";
        final SimpleDateFormat sdf = new SimpleDateFormat(ISO_FORMAT);
        final TimeZone utc = TimeZone.getTimeZone("UTC");
        sdf.setTimeZone(utc);
        String timeStamp = sdf.format(date);
        return timeStamp.replace("UTC", "Z");
    }
    
    
    public static HttpResponseObject send(String method, String url, String urlParameters, Map<String,String> headers) throws IOException{
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        if (headers != null && !headers.isEmpty()) {
            for (String key : headers.keySet()) {
                con.setRequestProperty(key, headers.get(key));
                log.debug("\nSetting property: " + key + " - " + con.getRequestProperty(key));
            }
        }
        con.setDoOutput(true);
        con.setRequestMethod(method);
        log.debug("\nSending "+method+" request to URL : " + url + "\n URL Parameters:" + urlParameters);
        if(urlParameters != null) { 
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
        }
        int responseCode = con.getResponseCode();
        
        log.debug("\nRecevied Response Code : " + responseCode);

        BufferedReader in;
        if (responseCode != 200) {
            in = new BufferedReader(new InputStreamReader(con.getErrorStream()));
        } else {
            in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        }
        String inputLine;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();
        log.debug("Response: " + response.toString());
        return new HttpResponseObject(responseCode, response.toString());    
    }

    public static HttpResponseObject HttpSend(String method, String url, String urlParameters, String authorizationHeaderValue) throws IOException{
       Map<String,String> headerValues = new HashMap<String, String>();
       if(authorizationHeaderValue != null)
            headerValues.put("Authorization" , authorizationHeaderValue);
       return send(method, url, urlParameters, headerValues );
    }

    // HTTP POST request
    public static HttpResponseObject HttpSend(String method, String url, String urlParameters, String userAgent, String proxyHost, int proxyPort, String proxyUser, String proxyPass) throws IOException  {
        
        String encodedUserPwd = null;
        if(proxyHost!=null) {
            Properties systemSettings = System.getProperties();
            systemSettings.put("proxySet", "true");
            systemSettings.put("http.proxyHost", proxyHost);
            systemSettings.put("http.proxyPort", proxyPort);
            sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
            String domainUserPass = "domain\\"+proxyUser+":"+ proxyPass;
            encodedUserPwd = encoder.encode(domainUserPass.getBytes());
        }
        Map<String,String> headerMap = new HashMap<String,String>();
        headerMap.put("User-Agent", userAgent);
        if(encodedUserPwd != null) { 
            headerMap.put("Proxy-Authorization",  "Basic " + encodedUserPwd);
        }
        HttpResponseObject response = send(method, url, urlParameters, headerMap);
        return response;
}
    

    public static String urlEncode(String str) throws UnsupportedEncodingException {
        String val = (str == null) ? "" : str;
        String encoded = null;
        encoded = URLEncoder.encode(val, "UTF-8").replace("+", "%20").replace("*", "%2A").replace("%7E", "~");
        return encoded;
    }

    public static void urlEncodeAPIParams(Map<String, String> apiParameters) throws UnsupportedEncodingException {
        for (Map.Entry<String, String> entry : apiParameters.entrySet()) {
            entry.setValue(urlEncode(entry.getValue()));
        }
    }
    
    public static Map convertJsonToMap(String jsonData) {
        Map<String, String> dataMap = new HashMap<String, String>();
        Gson gson = new Gson();
        dataMap = (Map<String, String>) gson.fromJson(jsonData, dataMap.getClass());
      
      return dataMap;
    }
    
    public static <T> T convertJsonToObject(String jsonData, Class<T> clazz) {
      Gson gson = new Gson();
      T object =  gson.fromJson(jsonData, clazz);
      return object;
    }

}
