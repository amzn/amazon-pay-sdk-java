package com.amazon.payments.paywithamazon.impl;

import com.amazon.payments.paywithamazon.Config;
import com.amazon.payments.paywithamazon.Config;
import com.amazon.payments.paywithamazon.exceptions.AmazonClientException;
import com.amazon.payments.paywithamazon.response.autogenerated.model.Environment;
import com.amazon.payments.paywithamazon.types.CurrencyCode;
import com.amazon.payments.paywithamazon.types.Key;
import com.amazon.payments.paywithamazon.types.Region;
import java.util.Enumeration;
import java.util.Properties;

public class PaymentsConfig implements Config {
        private String accessKeyId;
	private String secretAccessKey;
	private String sellerId;
	private Region region;
	private Environment environment;
        private CurrencyCode currencyCode;
        private String applicationName;
        private String applicationVersion;
        private String proxyHost;
        private int proxyPort;
        private String proxyUsername;
        private String proxyPassword;
        private boolean useAutoRetryOnThrottle;
       
    /**
     * Constructor for PaymentsConfig that requires parameters such as
     * merchantId, access key, secret key, region settings, 
     * Note that default currency code is USD and default region code is US
     * You can override the default values using .withRegionCode() and .withCurrencyCode()
     * 
     * Optional proxy parameters allow to connect via proxy using 
     * parameters like proxyHost, proxyPort, proxyUserName, proxyPassword.
     * 
     * @param merchantId 
     *                  Your merchantId or sellerId is a unique identifier supplied by 
     *                  Amazon when you first created your account. This ID can be found 
     *                  in the Amazon Seller Central account.
     * @param accessKey
     *                  MWS Access KeyID associated with your account. This identifier 
     *                  can be found in Seller Central under INTEGRATION tab.
     * 
     * @param secretKey
     *                  MWS Secret Access Key associated with your account. This identifier 
     *                  can be found in Seller Central under INTEGRATION tab.
     *                
     * @throws IllegalArgumentException
     *                  If the required properties don't exist, throws IllegalArgumentException
     * 
     */
    public PaymentsConfig(String merchantId, String accessKey,  String secretKey ) 
            throws IllegalArgumentException {
        this.accessKeyId = accessKey;
        this.secretAccessKey = secretKey;
        this.sellerId = merchantId;
        
        //default values
        this.region = Region.US;
        this.environment = Environment.LIVE;
        this.currencyCode = CurrencyCode.USD;
        
        //throws exception if required properties don't exist 
        checkIfRequriedPropertiesExist();
    }
    
    public PaymentsConfig(Properties prop) {
        loadConfigurationFromProperties(prop);
        checkIfRequriedPropertiesExist();
    }
    
    /**
     * Identifies region associated with Login And Pay with Amazon API operations. 
     *                  {@link com.amazon.payments.lpa.types.Region Region}.
     * 
     * @param region
     * 
     */
    @Override
    public void setRegion(Region region) {
        this.region = region;
    }
    
        
    /**
     * Identifies region associated with Login And Pay with Amazon API operations. 
     *                  {@link com.amazon.payments.lpa.types.Region Region}.
     * 
     * @param region
     * 
     * @return updated PaymentsConfig container
     * 
     */
    @Override
    public PaymentsConfig withRegion(Region region) {
        this.region = region;
        return this;
    }    
    
    /**
     * Returns region code from client configuration
     * @see com.amazon.payments.lpa.types.Region
     * @return region
     */
    @Override
    public Region getRegion() {
        return region;
    }
   
    /**
     * Returns MWS Access KeyID from client configuration
     * @return accessKeyId
     */
    @Override
    public String getAccessKeyId() {
        return accessKeyId;
    }
    
    /**
     * Returns MWS Secret Access Key from client configuration
     * @return secretAccessKey
     *          
     */
    @Override
    public String getSecretAccessKey() {
        return secretAccessKey;
    }

    /**
     * Returns the merchantId or sellerId from client configuration
     * @return sellerId
     *          
     */
    @Override
    public String getSellerId() {
        return sellerId;
    }

    /**
     * Returns the environment from client configuration
     * @see com.amazon.payments.lpa.types.Environment
     * @return environment
     *          
     */
    @Override
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * Returns the application name from client configuration
     * @return applicationName
     *         
     */
    @Override
    public String getApplicationName() {
        return applicationName;
    }

    /**
     * Optional parameter. This method sets application name in 
     *                  client configuration.  
     * @param applicationName 
     * @return 
     *          Returns updated ClientConfig object
     */
    @Override
    public PaymentsConfig withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Returns the application version set in the client configuration
     * @return applicationVersion
     *          
     */
    @Override
    public String getApplicationVersion() {
        return applicationVersion;
    }

    /**
     * Optional parameter. This method sets application version in client configuration.
     * @param applicationVersion 
     *                    
     * @return Returns updated ClientConfig object
     */
    @Override
    public PaymentsConfig withApplicationVersion(String applicationVersion) {
        this.applicationVersion = applicationVersion;
        return this;
    }

    /**
     * Returns the proxy host set in the client configuration
     * @return proxyHost
     */
    @Override
    public String getProxyHost() {
        return proxyHost;
    }

    /**
     * Optional parameter. This method sets proxy host in client configuration
     * @param proxyHost 
     * @return Returns updated ClientConfig object
     */
    @Override
    public PaymentsConfig withProxyHost(String proxyHost) {
        this.proxyHost = proxyHost;
        return this;
    }

    /**
     * Returns proxy port from PaymentsConfig
     * @return proxyPort
     *
     */
    @Override
    public int getProxyPort() {
        return proxyPort;
    }

    /**
     * Optional parameter. This method sets proxy port in PaymentsConfig
     * @param proxyPort
     * @return Returns updated PaymentsConfig object
     */
    @Override
    public PaymentsConfig withProxyPort(int proxyPort) {
        this.proxyPort = proxyPort;
        return this;
    }

    /**
     * Returns proxy username from PaymentsConfig
     * @return proxyUsername
     */
    @Override
    public String getProxyUsername() {
        return proxyUsername;
    }

    /**
     * Optional parameter. This methods sets proxy username in PaymentsConfig
     * @param proxyUsername 
     * @return Returns updated ClientConfig object
     */
    @Override
    public PaymentsConfig withProxyUsername(String proxyUsername) {
        this.proxyUsername = proxyUsername;
        return this;
    }

    /**
     * Returns proxy password in PaymentsConfig
     * 
     * @return proxyPassword
     */
    @Override
    public String getProxyPassword() {
        return proxyPassword;
    }

    /**
     * Sets proxy username in configuration.
     * @param proxyPassword
     *             
     * @return 
     *          Returns updated PaymentsConfig object
     */
    
    
    @Override
    public PaymentsConfig withProxyPassword(String proxyPassword) {
        this.proxyPassword = proxyPassword;
        return this;
    }


    /**
     * Returns currencyCode in PaymentsConfig
     * @see com.amazon.payments.lpa.types.CurrencyCode
     * 
     * @return currencyCode
     */
    
    @Override
    public CurrencyCode getCurrencyCode() {
        return currencyCode;
    }
    
    /**
     * Sets currencyCode in PaymentsConfig
     * @see com.amazon.payments.lpa.types.CurrencyCode
     * @param currencyCode 
     */
    @Override
    public void setCurrencyCode(CurrencyCode currencyCode) {
        this.currencyCode = currencyCode;
    }
    
    /**
     * Represents currency code to be used for all Login And Pay with Amazon API operations. 
     *                  Accepts three-digit currency code. In ISO 4217 format.   
     *                  {@link com.amazon.payments.lpa.types.CurrencyCode CurrencyCode}
     * 
     * @param currencyCode
     * 
     * @return Returns the updated PaymentsConfig container
     */
    @Override
    public PaymentsConfig withCurrencyCode(CurrencyCode currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }

    /**
     * Sets AccessKey in PaymentsConfig
     * @param accessKeyId 
     */
    @Override
    public void setAccessKeyId(String accessKeyId) {
        this.accessKeyId = accessKeyId;
    }

    
    /**
     * Sets SecretKey in PaymentsConfig
     * @param secretAccessKey 
     */
    @Override
    public void setSecretAccessKey(String secretAccessKey) {
        this.secretAccessKey = secretAccessKey;
    }

    
    /**
     * Sets SellerId in PaymentsConfig
     * @param sellerId 
     */
    @Override
    public void setSellerId(String sellerId) {
        this.sellerId = sellerId;
    }
    
    /**
     * Sets Environment in PaymentsConfig
     * @see com.amazon.payments.lpa.types.Environment
     * 
     * @param environment 
     */
    @Override
    public void setEnvironment(Environment environment) {
        this.environment = environment;
    }
    
    /**
     *  If true, sets environment to SANDBOX mode. 
     *  All Login And Pay with Amazon API operations will be done in Sandbox Mode.
     *  {@link com.amazon.payments.lpa.types.Environment Environment}.
     * 
     * @param isSandbox 
     * 
     * @return updated PaymentsConfig container
     */
    @Override
    public PaymentsConfig sandboxMode(boolean isSandbox) {
        if(isSandbox) 
            this.environment = Environment.SANDBOX;
        else 
            this.environment = Environment.LIVE;
        return this;
    }
    
    /**
     *  Identifies environment(i.e. LIVE or SANDBOX mode) associated with Login And Pay with Amazon API operations.
     *  {@link com.amazon.payments.lpa.types.Environment Environment}.
     * 
     * @param environment 
     * 
     * @return updated PaymentsConfig container
     */
    @Override
    public PaymentsConfig withEnvironment(Environment environment) {
        this.environment = environment;
        return this;
    }

    
    /**
     * Sets Application Name in PaymentsConfig
     * @param applicationName 
     */
    @Override
    public void setApplicationName(String applicationName) {
        this.applicationName = applicationName;
    }


    /**
     * Sets Application Version in PaymentsConfig
     * @param applicationVersion 
     */
    @Override
    public void setApplicationVersion(String applicationVersion) {
        this.applicationVersion = applicationVersion;
    }

    
    /**
     * Sets proxy host in PaymentsConfig
     * @param proxyHost 
     */
    @Override
    public void setProxyHost(String proxyHost) {
        this.proxyHost = proxyHost;
    }

    
    /**
     * Sets proxy port in PaymentsConfig
     * @param proxyPort 
     */
    @Override
    public void setProxyPort(int proxyPort) {
        this.proxyPort = proxyPort;
    }

    
    /**
     * Sets proxy username in PaymentsConfig
     * @param proxyUsername 
     */
    @Override
    public void setProxyUsername(String proxyUsername) {
        this.proxyUsername = proxyUsername;
    }

    /**
     * Set proxy password in PaymentsConfig
     * @param proxyPassword 
     */
    @Override
    public void setProxyPassword(String proxyPassword) {
        this.proxyPassword = proxyPassword;
    }



    /**
     * Returns true if Client retries on service exceptions that are either 500 internal server
     * errors, 503 service unavailable errors, service throttling errors.
     */
    
    @Override
    public boolean isUseAutoRetryOnThrottle() {
        return useAutoRetryOnThrottle;
    }

    /**
     * Sets autoRetryOnThrottle in PaymentsConfig
     * If set to true, client will retry on service exceptions that are either 500 internal server
     * errors, 503 service unavailable errors, service throttling errors.
     * 
     * @param useAutoRetryOnThrottle
     */
    
    @Override
    public void setUseAutoRetryOnThrottle(boolean useAutoRetryOnThrottle) {
        this.useAutoRetryOnThrottle = useAutoRetryOnThrottle;
    }

    /**
     * Sets autoRetryOnThrottle in PaymentsConfig
     * If set to true, client will retry on service exceptions that are either 500 internal server
     * errors, 503 service unavailable errors, service throttling errors.
     * 
     * @return PaymentsConfig 
     */
    
    @Override
    public PaymentsConfig withUseAutoRetryOnThrottle(boolean useAutoRetryOnThrottle) {
        this.useAutoRetryOnThrottle = useAutoRetryOnThrottle;
        return this;
    }
    
   
    private PaymentsConfig loadConfigurationFromProperties(Properties prop) {
        if (prop == null || prop.isEmpty())
            throw new IllegalArgumentException("Properties are empty, Need required propeties to proceed configuring amazon payments client");
    
        Enumeration enumeration = prop.propertyNames();
    
        while(enumeration.hasMoreElements()) {
            String property = (String) enumeration.nextElement();
            try { 
                switch (Key.valueOf(property.toUpperCase())) {
                    case ACCESS_KEY:
                        this.setAccessKeyId(prop.getProperty(property));  
                        break;
                    case SECRET_KEY:
                        this.setSecretAccessKey(prop.getProperty(property));
                        break;
                    case MERCHANT_ID:
                        this.setSellerId(prop.getProperty(property));
                        break;
                    case ENVIRONMENT:
                        Environment environment = Environment.valueOf(prop.getProperty(property).toUpperCase());
                        this.setEnvironment(environment);
                        break;
                    case REGION:
                        Region region = Region.valueOf((prop.getProperty(property)).toUpperCase());
                        this.setRegion(region);
                        break;
                    case CURRENCY_CODE:
                        CurrencyCode currency = CurrencyCode.valueOf((prop.getProperty(property)).toUpperCase());
                        this.setCurrencyCode(currency);
                        break;
                    case PROXY_HOST:
                        String proxyHost = prop.getProperty(property);
                        this.setProxyHost(proxyHost);
                        break;
                    case PROXY_PORT:
                        String proxyPort = prop.getProperty(property);
                        if(proxyPort != null && !proxyPort.isEmpty())
                            this.setProxyPort(Integer.parseInt(proxyPort));
                        break;
                    case PROXY_USERNAME:
                        String proxyUsername = prop.getProperty(property);
                        this.setProxyUsername(proxyUsername);
                        break;
                    case PROXY_PASSWORD:
                        String proxyPassword = prop.getProperty(property);
                        this.setProxyPassword(proxyPassword);
                        break;
                    case APPLICATION_NAME:
                        String applicationName = prop.getProperty(property);
                        this.setApplicationName(applicationName);
                        break;
                    case APPLICATION_VERSION:
                        String applicationVersion = prop.getProperty(property);
                        this.setApplicationVersion(applicationVersion);
                        break;
                    case AUTO_RETRY_ON_THROTTLE:
                        String useAutoRetyOnThrottle = prop.getProperty(property);
                        this.setUseAutoRetryOnThrottle(Boolean.valueOf(useAutoRetyOnThrottle));
                        break;
                    default:
                        throw new AmazonClientException(("Client error, unable to set client configuration property [Key: " 
                            + property +", Value: " + prop.getProperty(property) + "]. " ));
                    }
                } catch(IllegalArgumentException e) {
                    throw new IllegalArgumentException("Unable to process client configuration parameter [Key: " 
                            + property +", Value: " + prop.getProperty(property) + "]. " , e);
                }
            }

        return this;
    }

    /**
     * Helper method to check if required values are set. 
     * 
     * @throws IllegalArgumentException If required values are missing.
     */
    private boolean checkIfRequriedPropertiesExist() {
        if (this.accessKeyId == null)
            generateException(Key.ACCESS_KEY);
        else if(this.secretAccessKey == null)
            generateException(Key.SECRET_KEY);
        else if(this.sellerId == null)
            generateException(Key.MERCHANT_ID);
        else if(this.environment == null)
            generateException(Key.ENVIRONMENT);
       else if(this.region == null)
            generateException(Key.REGION);
       else if(this.currencyCode == null)
            generateException(Key.CURRENCY_CODE);
        return true;
    
    }
    
    private void generateException(Key propertyKey) {
            throw new IllegalArgumentException(propertyKey.toString() +
                    " property is not set, this is a required property for Amazon Payments client configuration");
    }

    
    /**
     * The string representation of configuration parameters
     * 
     * @return Returns the string representation of configuration parameters
     */
    @Override
    public String toString() {
        return "PaymentsConfig{" + "accessKeyId=" + accessKeyId + ", secretAccessKey=" + secretAccessKey + ", sellerId=" 
                + sellerId + ", region=" + region + ", environment=" + environment + ", currencyCode=" + currencyCode + ", applicationName=" 
                + applicationName + ", applicationVersion=" + applicationVersion + ", proxyHost=" + proxyHost + ", proxyPort=" 
                + proxyPort + ", proxyUsername=" + proxyUsername + ", proxyPassword=" + proxyPassword + ", useAutoRetryOnThrottle=" 
                + useAutoRetryOnThrottle + '}';
    }

  

}